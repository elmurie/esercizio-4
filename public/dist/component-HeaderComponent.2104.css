@import url(https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@400;600;700;800&display=swap);
@import url(https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,400;0,500;0,600;0,700;1,700&display=swap);
@charset "UTF-8";
/* ------ getting values from a map with alert ----- */
/* ===BASELINE=== */
/**
 * Ref: http://www.modularscale.com/
 */
/* ===REM FUNCTION=== */
/**
 * Sassy functions to get the rem equivalent of a px value
 * preset-css-env will take care of fallback for older browsers
 * !NOTE: you only need to change the $rem-baseline value if your base size
 * is different from 10px (use _var_typography.scss in case)
 * @param value is referred to px
 * Credits: Rowan Manning
 */
/**
 * Ref: https://www.smashingmagazine.com/2014/06/sassy-z-index-management-for-complex-layouts/
 * In order to maintain the stacking order of the elements,
 * we can set up a Sass list which represents the order in which we want our elements to appear,
 * from lowest to highest, like shown below.
 * (Note that if we want to add an element to the existing stacking order,
 * we just have to update the list with our new element)
 * In order to retrieve the z-index value to assign to each element,
 * you can use the index() sass function, for i.e. .modal {z-index: index($elements, modal)}
 */
/**
 * To make to solution scalable across the website, you can add multiple lists, related to specific contexts.
 * Remember that CSS spec informs us that
 * “stacking contexts are generated by any positioned element
 * (including relatively positioned elements) having a computed value of ‘z-index’ other than ‘auto’”,
 * so stick to this spec if you want to create a new stacking context.
 */
.c-header-component {
  width: calc(100% - var(--main-container-pad-x) * 2px);
  max-width: 1600px;
  margin-left: auto;
  margin-right: auto;
  font-family: "Nunito Sans", sans-serif;
  z-index: 2;
}
.c-header-component .header-component__wrapper {
  padding: 3rem 0;
  background-color: transparent;
  width: 100%;
  display: flex;
  justify-content: space-between;
  align-items: center;
}
.c-header-component .header-component__logo img {
  width: 100%;
}
.c-header-component .header-component__actions {
  width: min(200px, 30%);
  display: flex;
  justify-content: space-between;
  padding-right: 2.5rem;
}
.c-header-component .header-component__actions__language, .c-header-component .header-component__actions__menu {
  display: flex;
  align-items: center;
}
.c-header-component .header-component__actions__language a, .c-header-component .header-component__actions__menu a {
  padding: 7px 10px;
}
.c-header-component .header-component__actions__language {
  font-size: 1.4rem;
  text-transform: uppercase;
}
.c-header-component .header-component__actions__language :first-child {
  font-weight: 800;
  border-right: 1px solid black;
}
.c-header-component .header-component__actions__menu {
  font-size: 1.4rem;
}
.c-header-component .header-component__actions__menu__label {
  margin-right: 1rem;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/