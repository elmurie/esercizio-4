@charset "UTF-8";
/* ------ getting values from a map with alert ----- */
/* ===BASELINE=== */
/**
 * Ref: http://www.modularscale.com/
 */
/* ===REM FUNCTION=== */
/**
 * Sassy functions to get the rem equivalent of a px value
 * preset-css-env will take care of fallback for older browsers
 * !NOTE: you only need to change the $rem-baseline value if your base size
 * is different from 10px (use _var_typography.scss in case)
 * @param value is referred to px
 * Credits: Rowan Manning
 */
/**
 * Ref: https://www.smashingmagazine.com/2014/06/sassy-z-index-management-for-complex-layouts/
 * In order to maintain the stacking order of the elements,
 * we can set up a Sass list which represents the order in which we want our elements to appear,
 * from lowest to highest, like shown below.
 * (Note that if we want to add an element to the existing stacking order,
 * we just have to update the list with our new element)
 * In order to retrieve the z-index value to assign to each element,
 * you can use the index() sass function, for i.e. .modal {z-index: index($elements, modal)}
 */
/**
 * To make to solution scalable across the website, you can add multiple lists, related to specific contexts.
 * Remember that CSS spec informs us that
 * “stacking contexts are generated by any positioned element
 * (including relatively positioned elements) having a computed value of ‘z-index’ other than ‘auto’”,
 * so stick to this spec if you want to create a new stacking context.
 */
.c-main-component .title {
  font-family: "Poppins", sans-serif;
  font-size: 3rem;
  font-weight: normal;
  line-height: 1.3;
  margin: 0;
}
@media screen and (min-width: 992px) {
  .c-main-component .title {
    font-size: 5rem;
  }
}

.c-main-component .main__wrapper {
  width: calc(100% - var(--main-container-pad-x) * 2px);
  max-width: 1600px;
  margin-left: auto;
  margin-right: auto;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LU1haW5Db21wb25lbnQuYjMxNy5jc3MiLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCO0FDQ2hCO0FDREE7QUFDQTs7RUFBQTtBQVFBO0FBQ0E7Ozs7Ozs7RUFBQTtBQ1ZBOzs7Ozs7Ozs7RUFBQTtBQWdDQTs7Ozs7O0VBQUE7QUN0QkE7RUFDSSxrQ0FSa0I7RUFTbEI7RUFDQSxtQkFQVztFQVFYO0VBQ0E7QUp1Qko7QUtKRTtFRHhCRjtJQU9RO0VKeUJOO0FBQ0Y7O0FBbENJO0VLaUNGO0VBQ0E7RUFDQTtFQUNBO0FMS0YsQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9zY3NzL2NvbXBvbmVudHMvYy1tYWluLWNvbXBvbmVudC5zY3NzIiwid2VicGFjazovLy8uL3NyYy9zY3NzL3V0aWxzL191X2Z1bmN0aW9ucy5zY3NzIiwid2VicGFjazovLy8uL3NyYy9zY3NzL3V0aWxzL191LXJlbS5zY3NzIiwid2VicGFjazovLy8uL3NyYy9zY3NzL3V0aWxzL191LXotaW5kZXhlcy5zY3NzIiwid2VicGFjazovLy8uL3NyYy9zY3NzL3V0aWxzL191LXR5cG9ncmFwaHktcGxhY2Vob2xkZXJzLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Njc3MvdXRpbHMvX3VfZ3JpZC5zY3NzIl0sInNvdXJjZXNDb250ZW50IjpbIkBpbXBvcnQgXCIuLi91dGlscy91X2Z1bmN0aW9uc1wiO1xuQGltcG9ydCBcIi4uL3V0aWxzL3UtcmVtXCI7XG5AaW1wb3J0IFwiLi4vdXRpbHMvdV9ncmlkXCI7XG5AaW1wb3J0IFwiLi4vdXRpbHMvdS1jb2xvcnNcIjtcbkBpbXBvcnQgXCIuLi91dGlscy91LXotaW5kZXhlc1wiO1xuQGltcG9ydCBcIi4uL3V0aWxzL3UtdHlwb2dyYXBoeS1wbGFjZWhvbGRlcnNcIjtcbkBpbXBvcnQgXCIuLi91dGlscy91LWdlbmVyaWMtcGxhY2Vob2xkZXJzXCI7XG5cbi5jLW1haW4tY29tcG9uZW50IHtcclxuICAgIC5tYWluX193cmFwcGVyIHtcclxuICAgICAgICBAaW5jbHVkZSBtYWluQ29udGFpbmVyKCk7XHJcbiAgICB9XHJcbiAgICAudGl0bGUge1xyXG4gICAgICAgIEBleHRlbmQgJXR5cG8taDE7XHJcbiAgICB9XHJcbn1cclxuQGluY2x1ZGUgcmVzcG9uc2l2ZUZyb20oJ2xnJykge1xyXG4gICAgLmMtbWFpbi1jb21wb25lbnQge1xyXG4gICAgfVxyXG59IiwiQHVzZSBcInNhc3M6bWFwXCI7XG4vKiAtLS0tLS0gZ2V0dGluZyB2YWx1ZXMgZnJvbSBhIG1hcCB3aXRoIGFsZXJ0IC0tLS0tICovXG5cbkBmdW5jdGlvbiBtYXAoJG1hcCwgJGtleSkge1xuICBAaWYgbm90IG1hcC5oYXMta2V5KCRtYXAsICRrZXkpIHtcbiAgICBAd2FybiBcIktleSBgI3ska2V5fWAgbm90IGZvdW5kIGluICRtYXAgbWFwLlwiO1xuICB9XG4gIEByZXR1cm4gbWFwLmdldCgkbWFwLCAka2V5KTtcbn1cbiIsIi8qID09PUJBU0VMSU5FPT09ICovXG4vKipcbiAqIFJlZjogaHR0cDovL3d3dy5tb2R1bGFyc2NhbGUuY29tL1xuICovXG5AdXNlIFwic2FzczptYXRoXCI7XG5cbiRyZW0tYmFzZWxpbmU6IDEwO1xuJGdsb2JhbC1mb250LXNpemU6IDYyLjUlO1xuXG4vKiA9PT1SRU0gRlVOQ1RJT049PT0gKi9cbi8qKlxuICogU2Fzc3kgZnVuY3Rpb25zIHRvIGdldCB0aGUgcmVtIGVxdWl2YWxlbnQgb2YgYSBweCB2YWx1ZVxuICogcHJlc2V0LWNzcy1lbnYgd2lsbCB0YWtlIGNhcmUgb2YgZmFsbGJhY2sgZm9yIG9sZGVyIGJyb3dzZXJzXG4gKiAhTk9URTogeW91IG9ubHkgbmVlZCB0byBjaGFuZ2UgdGhlICRyZW0tYmFzZWxpbmUgdmFsdWUgaWYgeW91ciBiYXNlIHNpemVcbiAqIGlzIGRpZmZlcmVudCBmcm9tIDEwcHggKHVzZSBfdmFyX3R5cG9ncmFwaHkuc2NzcyBpbiBjYXNlKVxuICogQHBhcmFtIHZhbHVlIGlzIHJlZmVycmVkIHRvIHB4XG4gKiBDcmVkaXRzOiBSb3dhbiBNYW5uaW5nXG4gKi9cbkBmdW5jdGlvbiByZW0oJHZhbHVlLCAkcmVtLWJhc2VsaW5lOiRyZW0tYmFzZWxpbmUpIHtcbiAgICAvKiBJZiB2YWx1ZSBpcyBhIG51bWJlciwgZG8gc29tZSBtYWdpYyByZW0gc3R1ZmYgKi9cbiAgICBAaWYgdHlwZS1vZigkdmFsdWUpID09IFwibnVtYmVyXCIge1xuICAgICAgICAvKiBTbGlnaHRseSBoYWNreSB3YXkgb2YgcmVtb3ZpbmcgdW5pdCAqL1xuICAgICAgICAkdW5pdGxlc3MtdmFsdWU6IG1hdGguZGl2KCR2YWx1ZSwgJHZhbHVlICogMCArIDEpO1xuICAgICAgICAvKiBSZXR1cm4gcmVtIHZhbHVlICovXG4gICAgICAgIEByZXR1cm4gI3ttYXRoLmRpdigkdW5pdGxlc3MtdmFsdWUsICRyZW0tYmFzZWxpbmUpfXJlbTtcbiAgICB9XG4gICAgLyogTm9uLW51bWVyaWMgdmFsdWUsIGp1c3QgcmV0dXJuICovXG4gICAgQHJldHVybiAkdmFsdWU7XG59XG4iLCIvKipcbiAqIFJlZjogaHR0cHM6Ly93d3cuc21hc2hpbmdtYWdhemluZS5jb20vMjAxNC8wNi9zYXNzeS16LWluZGV4LW1hbmFnZW1lbnQtZm9yLWNvbXBsZXgtbGF5b3V0cy9cbiAqIEluIG9yZGVyIHRvIG1haW50YWluIHRoZSBzdGFja2luZyBvcmRlciBvZiB0aGUgZWxlbWVudHMsXG4gKiB3ZSBjYW4gc2V0IHVwIGEgU2FzcyBsaXN0IHdoaWNoIHJlcHJlc2VudHMgdGhlIG9yZGVyIGluIHdoaWNoIHdlIHdhbnQgb3VyIGVsZW1lbnRzIHRvIGFwcGVhcixcbiAqIGZyb20gbG93ZXN0IHRvIGhpZ2hlc3QsIGxpa2Ugc2hvd24gYmVsb3cuXG4gKiAoTm90ZSB0aGF0IGlmIHdlIHdhbnQgdG8gYWRkIGFuIGVsZW1lbnQgdG8gdGhlIGV4aXN0aW5nIHN0YWNraW5nIG9yZGVyLFxuICogd2UganVzdCBoYXZlIHRvIHVwZGF0ZSB0aGUgbGlzdCB3aXRoIG91ciBuZXcgZWxlbWVudClcbiAqIEluIG9yZGVyIHRvIHJldHJpZXZlIHRoZSB6LWluZGV4IHZhbHVlIHRvIGFzc2lnbiB0byBlYWNoIGVsZW1lbnQsXG4gKiB5b3UgY2FuIHVzZSB0aGUgaW5kZXgoKSBzYXNzIGZ1bmN0aW9uLCBmb3IgaS5lLiAubW9kYWwge3otaW5kZXg6IGluZGV4KCRlbGVtZW50cywgbW9kYWwpfVxuICovXG5cbiRiYXNlLWVsZW1lbnRzOiAgbWFpbiwgaGVhZGVyLCBwZHAtYmFyLCBtYWlubWVudSwgc2VhcmNoYmFyLCBzaWRlYmFyLCBtb2RhbCwgem9vbTtcbi8vIyMgUGxheWluZyB3aXRoIHN5c3RlbSB3aWRlIHotaW5kZXhlc1xuJHotaS1tYWluICAgICA6IGluZGV4KCRiYXNlLWVsZW1lbnRzLCBtYWluKTtcbiR6LWktaGVhZGVyICAgOiBpbmRleCgkYmFzZS1lbGVtZW50cywgaGVhZGVyKTtcbiR6LWktcGRwLWJhciAgICAgOiBpbmRleCgkYmFzZS1lbGVtZW50cywgcGRwLWJhcik7XG4kei1pLXNlYXJjaGJhciAgICA6IGluZGV4KCRiYXNlLWVsZW1lbnRzLCBzZWFyY2hiYXIpO1xuJHotaS1zaWRlYmFyIDogaW5kZXgoJGJhc2UtZWxlbWVudHMsc2lkZWJhcik7XG4kei1pLW1lbnUgICAgOiBpbmRleCgkYmFzZS1lbGVtZW50cywgbWFpbm1lbnUpO1xuJHotaS1tb2RhbCAgICA6IGluZGV4KCRiYXNlLWVsZW1lbnRzLCBtb2RhbCk7XG4kei1pLXpvb20gICAgOiBpbmRleCgkYmFzZS1lbGVtZW50cywgem9vbSk7XG5cbi8vI0hlYWRlciBlbGVtZW50cyB6LWluZGV4ZXNcbiRoZWFkZXItZWxlbWVudHM6IHNlYXJjaCwgbmF2LW1lbnUsIG1pbmljYXJ0LCBtZW51LW1vYmlsZTtcblxuJHotaS1oZWFkZXItLXNlYXJjaDogaW5kZXgoJGhlYWRlci1lbGVtZW50cywgc2VhcmNoKTtcbiR6LWktaGVhZGVyLS1tZW51OiBpbmRleCgkaGVhZGVyLWVsZW1lbnRzLCBuYXYtbWVudSk7XG4kei1pLWhlYWRlci0tbWVudS1tb2I6IGluZGV4KCRoZWFkZXItZWxlbWVudHMsIG1lbnUtbW9iaWxlKTtcbiR6LWktaGVhZGVyLS1taW5pY2FydDogaW5kZXgoJGhlYWRlci1lbGVtZW50cywgbWluaWNhcnQpO1xuXG4vLyAgJG1vZGFsLWVsZW1lbnRzOiBmaWVsZHMsIGZvcm0tY29udHJvbHMsIGVycm9ycywgYXV0b2NvbXBsZXRlLWRyb3Bkb3duO1xuXG4vKipcbiAqIFRvIG1ha2UgdG8gc29sdXRpb24gc2NhbGFibGUgYWNyb3NzIHRoZSB3ZWJzaXRlLCB5b3UgY2FuIGFkZCBtdWx0aXBsZSBsaXN0cywgcmVsYXRlZCB0byBzcGVjaWZpYyBjb250ZXh0cy5cbiAqIFJlbWVtYmVyIHRoYXQgQ1NTIHNwZWMgaW5mb3JtcyB1cyB0aGF0XG4gKiDigJxzdGFja2luZyBjb250ZXh0cyBhcmUgZ2VuZXJhdGVkIGJ5IGFueSBwb3NpdGlvbmVkIGVsZW1lbnRcbiAqIChpbmNsdWRpbmcgcmVsYXRpdmVseSBwb3NpdGlvbmVkIGVsZW1lbnRzKSBoYXZpbmcgYSBjb21wdXRlZCB2YWx1ZSBvZiDigJh6LWluZGV44oCZIG90aGVyIHRoYW4g4oCYYXV0b+KAmeKAnSxcbiAqIHNvIHN0aWNrIHRvIHRoaXMgc3BlYyBpZiB5b3Ugd2FudCB0byBjcmVhdGUgYSBuZXcgc3RhY2tpbmcgY29udGV4dC5cbiAqL1xuIiwiLy8gJGJhc2UtZm9udC1mYW1pbHk6IHZhcigtLWJhc2UtZm9udC1mYW1pbHkpO1xuJGJhc2UtZm9udC1mYW1pbHk6ICdOdW5pdG8gU2FucycsIHNhbnMtc2VyaWY7XG4vLyAkZGlzcGxheS1mb250LWZhbWlseTogdmFyKC0tZGlzcGxheS1mb250LWZhbWlseSk7XG4kZGlzcGxheS1mb250LWZhbWlseTogJ1BvcHBpbnMnLCBzYW5zLXNlcmlmO1xuXG4vL0ZvbnQgd2VpZ2h0c1xuJGZvbnQtcmVndWxhcjogdW5xdW90ZSgnbm9ybWFsJyk7XG4kZm9udC1tZWRpdW06IHVucXVvdGUoJzUwMCcpO1xuJGZvbnQtYm9sZDogdW5xdW90ZSgnYm9sZCcpO1xuXG4ldHlwby1oMXtcbiAgICBmb250LWZhbWlseTogJGRpc3BsYXktZm9udC1mYW1pbHk7XG4gICAgZm9udC1zaXplOiByZW0oMzApO1xuICAgIGZvbnQtd2VpZ2h0OiAkZm9udC1yZWd1bGFyO1xuICAgIGxpbmUtaGVpZ2h0OiAxLjM7XG4gICAgbWFyZ2luOiAwO1xuICAgIEBpbmNsdWRlIHJlc3BvbnNpdmVGcm9tKCdsZycpe1xuICAgICAgICBmb250LXNpemU6IHJlbSg1MCk7XG4gICAgfVxufVxuJXR5cG8taDJ7XG4gICAgZm9udC1mYW1pbHk6ICRkaXNwbGF5LWZvbnQtZmFtaWx5O1xuICAgIGZvbnQtc2l6ZTogcmVtKDI0KTtcbiAgICBmb250LXdlaWdodDogJGZvbnQtcmVndWxhcjtcbiAgICBsaW5lLWhlaWdodDogMS4zO1xuICAgIG1hcmdpbjogMDtcbiAgICBAaW5jbHVkZSByZXNwb25zaXZlRnJvbSgnbGcnKXtcbiAgICAgICAgZm9udC1zaXplOiByZW0oNDApO1xuICAgIH1cbn1cbiV0eXBvLWgze1xuICAgIGZvbnQtZmFtaWx5OiAkYmFzZS1mb250LWZhbWlseTtcbiAgICBmb250LXNpemU6IHJlbSgyMik7XG4gICAgZm9udC13ZWlnaHQ6ICRmb250LXJlZ3VsYXI7XG4gICAgbGluZS1oZWlnaHQ6IDEuMztcbiAgICBtYXJnaW46IDA7XG4gICAgQGluY2x1ZGUgcmVzcG9uc2l2ZUZyb20oJ2xnJyl7XG4gICAgICAgIGZvbnQtc2l6ZTogcmVtKDMyKTtcbiAgICB9XG59XG4ldHlwby1wYXJhZ3JhcGh7XG4gICAgZm9udC1mYW1pbHk6ICRiYXNlLWZvbnQtZmFtaWx5O1xuICAgIGZvbnQtc2l6ZTogcmVtKDE0KTtcbiAgICBsaW5lLWhlaWdodDogMS41O1xuICAgIGxldHRlci1zcGFjaW5nOiAwO1xuICAgIEBpbmNsdWRlIHJlc3BvbnNpdmVGcm9tKCdsZycpe1xuICAgICAgICBmb250LXNpemU6IHJlbSgxNik7XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAxLjM7XG4gICAgfVxufVxuXG4ldHlwby1ub3Rle1xuICAgIGZvbnQtZmFtaWx5OiAkYmFzZS1mb250LWZhbWlseTtcbiAgICBmb250LXNpemU6IHJlbSgxNCk7XG4gICAgbGluZS1oZWlnaHQ6IDEuMjtcbiAgICBsZXR0ZXItc3BhY2luZzogMDtcbiAgICBAaW5jbHVkZSByZXNwb25zaXZlRnJvbSgnbGcnKXtcbiAgICAgICAgZm9udC1zaXplOiByZW0oMTYpO1xuICAgIH1cbn1cblxuJXR5cG8tbWVudXtcbiAgICBmb250LWZhbWlseTogJGJhc2UtZm9udC1mYW1pbHk7XG4gICAgZm9udC1zaXplOiByZW0oMTQpO1xuICAgIGZvbnQtd2VpZ2h0OiAkZm9udC1tZWRpdW07XG4gICAgbGluZS1oZWlnaHQ6IDEuMjtcbiAgICBAaW5jbHVkZSByZXNwb25zaXZlRnJvbSgneHhsJyl7XG4gICAgICAgIGZvbnQtc2l6ZTogcmVtKDE1KTtcbiAgICB9XG59XG4ldHlwby1tZW51LWl0ZW17XG4gICAgZm9udC1mYW1pbHk6ICRiYXNlLWZvbnQtZmFtaWx5O1xuICAgIGZvbnQtc2l6ZTogcmVtKDE2KTtcbiAgICBmb250LXdlaWdodDogJGZvbnQtbWVkaXVtO1xuICAgIGxpbmUtaGVpZ2h0OiAxLjE5O1xufVxuXG4ldHlwby1mb290ZXItbWVudS1oZWFke1xuICAgIGZvbnQtZmFtaWx5OiAkYmFzZS1mb250LWZhbWlseTtcbiAgICBmb250LXNpemU6IHJlbSgxNyk7XG4gICAgZm9udC13ZWlnaHQ6ICRmb250LWJvbGQ7XG4gICAgbGluZS1oZWlnaHQ6IDEuMTc7XG59XG4iLCJAdXNlIFwic2FzczptYXBcIjtcblxuLy9WSUVXUE9SVFNcbiR2aWV3cG9ydHM6IChcbiAgICAgICAgeHhsOihcbiAgICAgICAgICAgICAgICBiYXNlOiAxNjAwXG4gICAgICAgICksXG4gICAgICAgIHhsOiAoXG4gICAgICAgICAgICAgICAgYmFzZTogMTI4MFxuICAgICAgICApLFxuICAgICAgICBsZzogKFxuICAgICAgICAgICAgICAgIGJhc2U6IDk5MlxuICAgICAgICApLFxuICAgICAgICBtZDogKFxuICAgICAgICAgICAgICAgIGJhc2U6IDc2OFxuICAgICAgICApLFxuICAgICAgICBzbTogKFxuICAgICAgICAgICAgICAgIGJhc2U6IDM3NVxuICAgICAgICApXG4pO1xuXG5AbWl4aW4gcmVzcG9uc2l2ZVRvKCR2aWV3cG9ydFJlZikge1xuICAkY3VyckJyZWFrOiBtYXAuZ2V0KCR2aWV3cG9ydHMsICR2aWV3cG9ydFJlZik7XG4gICRzZWxlY3RlZFZpZXdwb3J0OiBtYXAuZ2V0KCRjdXJyQnJlYWssICdiYXNlJyk7XG4gICR2aWV3cG9ydFRvdGFsOiAkc2VsZWN0ZWRWaWV3cG9ydCAtIDE7XG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6ICgkdmlld3BvcnRUb3RhbCoxcHgpKSB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbn1cblxuQG1peGluIHJlc3BvbnNpdmVGcm9tKCR2aWV3cG9ydFJlZikge1xuICAkY3VyckJyZWFrOiBtYXAuZ2V0KCR2aWV3cG9ydHMsICR2aWV3cG9ydFJlZik7XG4gICRzZWxlY3RlZFZpZXdwb3J0OiBtYXAuZ2V0KCRjdXJyQnJlYWssICdiYXNlJyk7XG4gICR2aWV3cG9ydFRvdGFsOiAkc2VsZWN0ZWRWaWV3cG9ydDtcbiAgQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogKCR2aWV3cG9ydFRvdGFsKjFweCkpIHtcbiAgICBAY29udGVudDtcbiAgfVxufVxuXG5AbWl4aW4gbWFpbkNvbnRhaW5lcigpIHtcbiAgJGN1cnJCcmVhazogbWFwLmdldCgkdmlld3BvcnRzLCAneHhsJyk7XG4gICRtYXhXaWR0aDogbWFwLmdldCgkbWFwOiAkY3VyckJyZWFrLCAka2V5OiAnYmFzZScpO1xuICB3aWR0aDogY2FsYygxMDAlIC0gKHZhcigtLW1haW4tY29udGFpbmVyLXBhZC14KSAqIDJweCkpO1xuICBtYXgtd2lkdGg6ICRtYXhXaWR0aCAqIDFweDtcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gIG1hcmdpbi1yaWdodDogYXV0bztcbn1cblxuQG1peGluIGdyaWQoICRjb2xzOjEyLCAkZ2FwWTogMCwkZ2FwWDogdmFyKC0tZ3JpZC1nYXApKSB7XG4gIGRpc3BsYXk6IGdyaWQ7XG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KCRjb2xzLCAxZnIpO1xuICBnYXA6IGNhbGMoICN7JGdhcFl9ICogMXB4ICkgY2FsYyggI3skZ2FwWH0gKiAxcHggKTtcbn1cblxuLy9cbi8vOnJvb3Qge1xuLy8gIC0tZ3JpZC1nYXA6IDIwO1xuLy8gIC0tbWFpbi1jb250YWluZXItcGFkLXg6IDIwO1xuLy99XG4vL1xuLy9AaW5jbHVkZSByZXNwb25zaXZlRnJvbSgnbGcnKSB7XG4vLyAgOnJvb3Qge1xuLy8gICAgLS1tYWluLWNvbnRhaW5lci1wYWQteDogMzA7XG4vLyAgfVxuLy99XG4vL1xuLy8kbWFpbkNvbnRhaW5lclBhZFg6IGNhbGModmFyKC0tbWFpbi1jb250YWluZXItcGFkLXgpICogMXB4KTtcbi8vJG1haW5Db250YWluZXJQYWRZOiBjYWxjKHZhcigtLW1haW4tY29udGFpbmVyLXBhZC14KSAqIDAuNXB4KTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==*/