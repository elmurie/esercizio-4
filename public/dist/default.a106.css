@charset "UTF-8";
/* ------ getting values from a map with alert ----- */
/* ===BASELINE=== */
/**
 * Ref: http://www.modularscale.com/
 */
/* ===REM FUNCTION=== */
/**
 * Sassy functions to get the rem equivalent of a px value
 * preset-css-env will take care of fallback for older browsers
 * !NOTE: you only need to change the $rem-baseline value if your base size
 * is different from 10px (use _var_typography.scss in case)
 * @param value is referred to px
 * Credits: Rowan Manning
 */
/**
 * Ref: https://www.smashingmagazine.com/2014/06/sassy-z-index-management-for-complex-layouts/
 * In order to maintain the stacking order of the elements,
 * we can set up a Sass list which represents the order in which we want our elements to appear,
 * from lowest to highest, like shown below.
 * (Note that if we want to add an element to the existing stacking order,
 * we just have to update the list with our new element)
 * In order to retrieve the z-index value to assign to each element,
 * you can use the index() sass function, for i.e. .modal {z-index: index($elements, modal)}
 */
/**
 * To make to solution scalable across the website, you can add multiple lists, related to specific contexts.
 * Remember that CSS spec informs us that
 * “stacking contexts are generated by any positioned element
 * (including relatively positioned elements) having a computed value of ‘z-index’ other than ‘auto’”,
 * so stick to this spec if you want to create a new stacking context.
 */
.c-test-component {
  background: orange;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC5hMTA2LmNzcyIsIm1hcHBpbmdzIjoiQUFBQSxnQkFBZ0I7QUNDaEI7QUNEQTtBQUNBOztFQUFBO0FBTUE7QUFDQTs7Ozs7OztFQUFBO0FDUkE7Ozs7Ozs7OztFQUFBO0FBZ0NBOzs7Ozs7RUFBQTtBSHhCQTtFQUNJO0FBeUJKLEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc2Nzcy9jb21wb25lbnRzL2MtdGVzdC1jb21wb25lbnQuc2NzcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2Nzcy91dGlscy9fdV9mdW5jdGlvbnMuc2NzcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2Nzcy91dGlscy9fdS1yZW0uc2NzcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2Nzcy91dGlscy9fdS16LWluZGV4ZXMuc2NzcyJdLCJzb3VyY2VzQ29udGVudCI6WyJAaW1wb3J0IFwiLi4vdXRpbHMvdV9mdW5jdGlvbnNcIjtcbkBpbXBvcnQgXCIuLi91dGlscy91LXJlbVwiO1xuQGltcG9ydCBcIi4uL3V0aWxzL3VfZ3JpZFwiO1xuQGltcG9ydCBcIi4uL3V0aWxzL3UtY29sb3JzXCI7XG5AaW1wb3J0IFwiLi4vdXRpbHMvdS16LWluZGV4ZXNcIjtcbkBpbXBvcnQgXCIuLi91dGlscy91LXR5cG9ncmFwaHktcGxhY2Vob2xkZXJzXCI7XG5AaW1wb3J0IFwiLi4vdXRpbHMvdS1nZW5lcmljLXBsYWNlaG9sZGVyc1wiO1xuXG4uYy10ZXN0LWNvbXBvbmVudHtcbiAgICBiYWNrZ3JvdW5kOiBvcmFuZ2U7XG59XG4iLCJAdXNlIFwic2FzczptYXBcIjtcbi8qIC0tLS0tLSBnZXR0aW5nIHZhbHVlcyBmcm9tIGEgbWFwIHdpdGggYWxlcnQgLS0tLS0gKi9cblxuQGZ1bmN0aW9uIG1hcCgkbWFwLCAka2V5KSB7XG4gIEBpZiBub3QgbWFwLmhhcy1rZXkoJG1hcCwgJGtleSkge1xuICAgIEB3YXJuIFwiS2V5IGAjeyRrZXl9YCBub3QgZm91bmQgaW4gJG1hcCBtYXAuXCI7XG4gIH1cbiAgQHJldHVybiBtYXAuZ2V0KCRtYXAsICRrZXkpO1xufVxuIiwiLyogPT09QkFTRUxJTkU9PT0gKi9cbi8qKlxuICogUmVmOiBodHRwOi8vd3d3Lm1vZHVsYXJzY2FsZS5jb20vXG4gKi9cbiRyZW0tYmFzZWxpbmU6IDEwO1xuJGdsb2JhbC1mb250LXNpemU6IDYyLjUlO1xuXG4vKiA9PT1SRU0gRlVOQ1RJT049PT0gKi9cbi8qKlxuICogU2Fzc3kgZnVuY3Rpb25zIHRvIGdldCB0aGUgcmVtIGVxdWl2YWxlbnQgb2YgYSBweCB2YWx1ZVxuICogcHJlc2V0LWNzcy1lbnYgd2lsbCB0YWtlIGNhcmUgb2YgZmFsbGJhY2sgZm9yIG9sZGVyIGJyb3dzZXJzXG4gKiAhTk9URTogeW91IG9ubHkgbmVlZCB0byBjaGFuZ2UgdGhlICRyZW0tYmFzZWxpbmUgdmFsdWUgaWYgeW91ciBiYXNlIHNpemVcbiAqIGlzIGRpZmZlcmVudCBmcm9tIDEwcHggKHVzZSBfdmFyX3R5cG9ncmFwaHkuc2NzcyBpbiBjYXNlKVxuICogQHBhcmFtIHZhbHVlIGlzIHJlZmVycmVkIHRvIHB4XG4gKiBDcmVkaXRzOiBSb3dhbiBNYW5uaW5nXG4gKi9cbkBmdW5jdGlvbiByZW0oJHZhbHVlLCAkcmVtLWJhc2VsaW5lOiRyZW0tYmFzZWxpbmUpIHtcbiAgICAvKiBJZiB2YWx1ZSBpcyBhIG51bWJlciwgZG8gc29tZSBtYWdpYyByZW0gc3R1ZmYgKi9cbiAgICBAaWYgdHlwZS1vZigkdmFsdWUpID09IFwibnVtYmVyXCIge1xuICAgICAgICAvKiBTbGlnaHRseSBoYWNreSB3YXkgb2YgcmVtb3ZpbmcgdW5pdCAqL1xuICAgICAgICAkdW5pdGxlc3MtdmFsdWU6ICR2YWx1ZSAvICgkdmFsdWUgKiAwICsgMSk7XG4gICAgICAgIC8qIFJldHVybiByZW0gdmFsdWUgKi9cbiAgICAgICAgQHJldHVybiAjeyR1bml0bGVzcy12YWx1ZSAvICRyZW0tYmFzZWxpbmV9cmVtO1xuICAgIH1cbiAgICAvKiBOb24tbnVtZXJpYyB2YWx1ZSwganVzdCByZXR1cm4gKi9cbiAgICBAcmV0dXJuICR2YWx1ZTtcbn1cbiIsIi8qKlxuICogUmVmOiBodHRwczovL3d3dy5zbWFzaGluZ21hZ2F6aW5lLmNvbS8yMDE0LzA2L3Nhc3N5LXotaW5kZXgtbWFuYWdlbWVudC1mb3ItY29tcGxleC1sYXlvdXRzL1xuICogSW4gb3JkZXIgdG8gbWFpbnRhaW4gdGhlIHN0YWNraW5nIG9yZGVyIG9mIHRoZSBlbGVtZW50cyxcbiAqIHdlIGNhbiBzZXQgdXAgYSBTYXNzIGxpc3Qgd2hpY2ggcmVwcmVzZW50cyB0aGUgb3JkZXIgaW4gd2hpY2ggd2Ugd2FudCBvdXIgZWxlbWVudHMgdG8gYXBwZWFyLFxuICogZnJvbSBsb3dlc3QgdG8gaGlnaGVzdCwgbGlrZSBzaG93biBiZWxvdy5cbiAqIChOb3RlIHRoYXQgaWYgd2Ugd2FudCB0byBhZGQgYW4gZWxlbWVudCB0byB0aGUgZXhpc3Rpbmcgc3RhY2tpbmcgb3JkZXIsXG4gKiB3ZSBqdXN0IGhhdmUgdG8gdXBkYXRlIHRoZSBsaXN0IHdpdGggb3VyIG5ldyBlbGVtZW50KVxuICogSW4gb3JkZXIgdG8gcmV0cmlldmUgdGhlIHotaW5kZXggdmFsdWUgdG8gYXNzaWduIHRvIGVhY2ggZWxlbWVudCxcbiAqIHlvdSBjYW4gdXNlIHRoZSBpbmRleCgpIHNhc3MgZnVuY3Rpb24sIGZvciBpLmUuIC5tb2RhbCB7ei1pbmRleDogaW5kZXgoJGVsZW1lbnRzLCBtb2RhbCl9XG4gKi9cblxuJGJhc2UtZWxlbWVudHM6ICBtYWluLCBwZHAtYmFyLCBoZWFkZXIsIG1haW5tZW51LCBzZWFyY2hiYXIsIHNpZGViYXIsIG1vZGFsLCB6b29tO1xuLy8jIyBQbGF5aW5nIHdpdGggc3lzdGVtIHdpZGUgei1pbmRleGVzXG4kei1pLW1haW4gICAgIDogaW5kZXgoJGJhc2UtZWxlbWVudHMsIG1haW4pO1xuJHotaS1wZHAtYmFyICAgICA6IGluZGV4KCRiYXNlLWVsZW1lbnRzLCBwZHAtYmFyKTtcbiR6LWktaGVhZGVyICAgOiBpbmRleCgkYmFzZS1lbGVtZW50cywgaGVhZGVyKTtcbiR6LWktc2VhcmNoYmFyICAgIDogaW5kZXgoJGJhc2UtZWxlbWVudHMsIHNlYXJjaGJhcik7XG4kei1pLXNpZGViYXIgOiBpbmRleCgkYmFzZS1lbGVtZW50cyxzaWRlYmFyKTtcbiR6LWktbWVudSAgICA6IGluZGV4KCRiYXNlLWVsZW1lbnRzLCBtYWlubWVudSk7XG4kei1pLW1vZGFsICAgIDogaW5kZXgoJGJhc2UtZWxlbWVudHMsIG1vZGFsKTtcbiR6LWktem9vbSAgICA6IGluZGV4KCRiYXNlLWVsZW1lbnRzLCB6b29tKTtcblxuLy8jSGVhZGVyIGVsZW1lbnRzIHotaW5kZXhlc1xuJGhlYWRlci1lbGVtZW50czogc2VhcmNoLCBuYXYtbWVudSwgbWluaWNhcnQsIG1lbnUtbW9iaWxlO1xuXG4kei1pLWhlYWRlci0tc2VhcmNoOiBpbmRleCgkaGVhZGVyLWVsZW1lbnRzLCBzZWFyY2gpO1xuJHotaS1oZWFkZXItLW1lbnU6IGluZGV4KCRoZWFkZXItZWxlbWVudHMsIG5hdi1tZW51KTtcbiR6LWktaGVhZGVyLS1tZW51LW1vYjogaW5kZXgoJGhlYWRlci1lbGVtZW50cywgbWVudS1tb2JpbGUpO1xuJHotaS1oZWFkZXItLW1pbmljYXJ0OiBpbmRleCgkaGVhZGVyLWVsZW1lbnRzLCBtaW5pY2FydCk7XG5cbi8vICAkbW9kYWwtZWxlbWVudHM6IGZpZWxkcywgZm9ybS1jb250cm9scywgZXJyb3JzLCBhdXRvY29tcGxldGUtZHJvcGRvd247XG5cbi8qKlxuICogVG8gbWFrZSB0byBzb2x1dGlvbiBzY2FsYWJsZSBhY3Jvc3MgdGhlIHdlYnNpdGUsIHlvdSBjYW4gYWRkIG11bHRpcGxlIGxpc3RzLCByZWxhdGVkIHRvIHNwZWNpZmljIGNvbnRleHRzLlxuICogUmVtZW1iZXIgdGhhdCBDU1Mgc3BlYyBpbmZvcm1zIHVzIHRoYXRcbiAqIOKAnHN0YWNraW5nIGNvbnRleHRzIGFyZSBnZW5lcmF0ZWQgYnkgYW55IHBvc2l0aW9uZWQgZWxlbWVudFxuICogKGluY2x1ZGluZyByZWxhdGl2ZWx5IHBvc2l0aW9uZWQgZWxlbWVudHMpIGhhdmluZyBhIGNvbXB1dGVkIHZhbHVlIG9mIOKAmHotaW5kZXjigJkgb3RoZXIgdGhhbiDigJhhdXRv4oCZ4oCdLFxuICogc28gc3RpY2sgdG8gdGhpcyBzcGVjIGlmIHlvdSB3YW50IHRvIGNyZWF0ZSBhIG5ldyBzdGFja2luZyBjb250ZXh0LlxuICovXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=*/