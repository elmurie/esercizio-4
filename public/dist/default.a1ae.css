@import url(https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@400;600;700;800&display=swap);
@import url(https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,400;0,500;0,600;0,700;1,700&display=swap);
@charset "UTF-8";
/* ------ getting values from a map with alert ----- */
/* ===BASELINE=== */
/**
 * Ref: http://www.modularscale.com/
 */
/* ===REM FUNCTION=== */
/**
 * Sassy functions to get the rem equivalent of a px value
 * preset-css-env will take care of fallback for older browsers
 * !NOTE: you only need to change the $rem-baseline value if your base size
 * is different from 10px (use _var_typography.scss in case)
 * @param value is referred to px
 * Credits: Rowan Manning
 */
/**
 * Ref: https://www.smashingmagazine.com/2014/06/sassy-z-index-management-for-complex-layouts/
 * In order to maintain the stacking order of the elements,
 * we can set up a Sass list which represents the order in which we want our elements to appear,
 * from lowest to highest, like shown below.
 * (Note that if we want to add an element to the existing stacking order,
 * we just have to update the list with our new element)
 * In order to retrieve the z-index value to assign to each element,
 * you can use the index() sass function, for i.e. .modal {z-index: index($elements, modal)}
 */
/**
 * To make to solution scalable across the website, you can add multiple lists, related to specific contexts.
 * Remember that CSS spec informs us that
 * “stacking contexts are generated by any positioned element
 * (including relatively positioned elements) having a computed value of ‘z-index’ other than ‘auto’”,
 * so stick to this spec if you want to create a new stacking context.
 */
.c-test-component {
  background: orange;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC5hMWFlLmNzcyIsIm1hcHBpbmdzIjoiOztBQUFBLGdCQUFnQjtBQ0NoQjtBQ0RBO0FBQ0E7O0VBQUE7QUFNQTtBQUNBOzs7Ozs7O0VBQUE7QUNSQTs7Ozs7Ozs7O0VBQUE7QUFnQ0E7Ozs7OztFQUFBO0FIeEJBO0VBQ0k7QUEyQkosQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9zY3NzL2NvbXBvbmVudHMvYy10ZXN0LWNvbXBvbmVudC5zY3NzIiwid2VicGFjazovLy8uL3NyYy9zY3NzL3V0aWxzL191X2Z1bmN0aW9ucy5zY3NzIiwid2VicGFjazovLy8uL3NyYy9zY3NzL3V0aWxzL191LXJlbS5zY3NzIiwid2VicGFjazovLy8uL3NyYy9zY3NzL3V0aWxzL191LXotaW5kZXhlcy5zY3NzIl0sInNvdXJjZXNDb250ZW50IjpbIkBpbXBvcnQgXCIuLi91dGlscy91X2Z1bmN0aW9uc1wiO1xuQGltcG9ydCBcIi4uL3V0aWxzL3UtcmVtXCI7XG5AaW1wb3J0IFwiLi4vdXRpbHMvdV9ncmlkXCI7XG5AaW1wb3J0IFwiLi4vdXRpbHMvdS1jb2xvcnNcIjtcbkBpbXBvcnQgXCIuLi91dGlscy91LXotaW5kZXhlc1wiO1xuQGltcG9ydCBcIi4uL3V0aWxzL3UtdHlwb2dyYXBoeS1wbGFjZWhvbGRlcnNcIjtcbkBpbXBvcnQgXCIuLi91dGlscy91LWdlbmVyaWMtcGxhY2Vob2xkZXJzXCI7XG5cbi5jLXRlc3QtY29tcG9uZW50e1xuICAgIGJhY2tncm91bmQ6IG9yYW5nZTtcbn1cbiIsIkB1c2UgXCJzYXNzOm1hcFwiO1xuLyogLS0tLS0tIGdldHRpbmcgdmFsdWVzIGZyb20gYSBtYXAgd2l0aCBhbGVydCAtLS0tLSAqL1xuXG5AZnVuY3Rpb24gbWFwKCRtYXAsICRrZXkpIHtcbiAgQGlmIG5vdCBtYXAuaGFzLWtleSgkbWFwLCAka2V5KSB7XG4gICAgQHdhcm4gXCJLZXkgYCN7JGtleX1gIG5vdCBmb3VuZCBpbiAkbWFwIG1hcC5cIjtcbiAgfVxuICBAcmV0dXJuIG1hcC5nZXQoJG1hcCwgJGtleSk7XG59XG4iLCIvKiA9PT1CQVNFTElORT09PSAqL1xuLyoqXG4gKiBSZWY6IGh0dHA6Ly93d3cubW9kdWxhcnNjYWxlLmNvbS9cbiAqL1xuJHJlbS1iYXNlbGluZTogMTA7XG4kZ2xvYmFsLWZvbnQtc2l6ZTogNjIuNSU7XG5cbi8qID09PVJFTSBGVU5DVElPTj09PSAqL1xuLyoqXG4gKiBTYXNzeSBmdW5jdGlvbnMgdG8gZ2V0IHRoZSByZW0gZXF1aXZhbGVudCBvZiBhIHB4IHZhbHVlXG4gKiBwcmVzZXQtY3NzLWVudiB3aWxsIHRha2UgY2FyZSBvZiBmYWxsYmFjayBmb3Igb2xkZXIgYnJvd3NlcnNcbiAqICFOT1RFOiB5b3Ugb25seSBuZWVkIHRvIGNoYW5nZSB0aGUgJHJlbS1iYXNlbGluZSB2YWx1ZSBpZiB5b3VyIGJhc2Ugc2l6ZVxuICogaXMgZGlmZmVyZW50IGZyb20gMTBweCAodXNlIF92YXJfdHlwb2dyYXBoeS5zY3NzIGluIGNhc2UpXG4gKiBAcGFyYW0gdmFsdWUgaXMgcmVmZXJyZWQgdG8gcHhcbiAqIENyZWRpdHM6IFJvd2FuIE1hbm5pbmdcbiAqL1xuQGZ1bmN0aW9uIHJlbSgkdmFsdWUsICRyZW0tYmFzZWxpbmU6JHJlbS1iYXNlbGluZSkge1xuICAgIC8qIElmIHZhbHVlIGlzIGEgbnVtYmVyLCBkbyBzb21lIG1hZ2ljIHJlbSBzdHVmZiAqL1xuICAgIEBpZiB0eXBlLW9mKCR2YWx1ZSkgPT0gXCJudW1iZXJcIiB7XG4gICAgICAgIC8qIFNsaWdodGx5IGhhY2t5IHdheSBvZiByZW1vdmluZyB1bml0ICovXG4gICAgICAgICR1bml0bGVzcy12YWx1ZTogJHZhbHVlIC8gKCR2YWx1ZSAqIDAgKyAxKTtcbiAgICAgICAgLyogUmV0dXJuIHJlbSB2YWx1ZSAqL1xuICAgICAgICBAcmV0dXJuICN7JHVuaXRsZXNzLXZhbHVlIC8gJHJlbS1iYXNlbGluZX1yZW07XG4gICAgfVxuICAgIC8qIE5vbi1udW1lcmljIHZhbHVlLCBqdXN0IHJldHVybiAqL1xuICAgIEByZXR1cm4gJHZhbHVlO1xufVxuIiwiLyoqXG4gKiBSZWY6IGh0dHBzOi8vd3d3LnNtYXNoaW5nbWFnYXppbmUuY29tLzIwMTQvMDYvc2Fzc3ktei1pbmRleC1tYW5hZ2VtZW50LWZvci1jb21wbGV4LWxheW91dHMvXG4gKiBJbiBvcmRlciB0byBtYWludGFpbiB0aGUgc3RhY2tpbmcgb3JkZXIgb2YgdGhlIGVsZW1lbnRzLFxuICogd2UgY2FuIHNldCB1cCBhIFNhc3MgbGlzdCB3aGljaCByZXByZXNlbnRzIHRoZSBvcmRlciBpbiB3aGljaCB3ZSB3YW50IG91ciBlbGVtZW50cyB0byBhcHBlYXIsXG4gKiBmcm9tIGxvd2VzdCB0byBoaWdoZXN0LCBsaWtlIHNob3duIGJlbG93LlxuICogKE5vdGUgdGhhdCBpZiB3ZSB3YW50IHRvIGFkZCBhbiBlbGVtZW50IHRvIHRoZSBleGlzdGluZyBzdGFja2luZyBvcmRlcixcbiAqIHdlIGp1c3QgaGF2ZSB0byB1cGRhdGUgdGhlIGxpc3Qgd2l0aCBvdXIgbmV3IGVsZW1lbnQpXG4gKiBJbiBvcmRlciB0byByZXRyaWV2ZSB0aGUgei1pbmRleCB2YWx1ZSB0byBhc3NpZ24gdG8gZWFjaCBlbGVtZW50LFxuICogeW91IGNhbiB1c2UgdGhlIGluZGV4KCkgc2FzcyBmdW5jdGlvbiwgZm9yIGkuZS4gLm1vZGFsIHt6LWluZGV4OiBpbmRleCgkZWxlbWVudHMsIG1vZGFsKX1cbiAqL1xuXG4kYmFzZS1lbGVtZW50czogIG1haW4sIGhlYWRlciwgcGRwLWJhciwgbWFpbm1lbnUsIHNlYXJjaGJhciwgc2lkZWJhciwgbW9kYWwsIHpvb207XG4vLyMjIFBsYXlpbmcgd2l0aCBzeXN0ZW0gd2lkZSB6LWluZGV4ZXNcbiR6LWktbWFpbiAgICAgOiBpbmRleCgkYmFzZS1lbGVtZW50cywgbWFpbik7XG4kei1pLWhlYWRlciAgIDogaW5kZXgoJGJhc2UtZWxlbWVudHMsIGhlYWRlcik7XG4kei1pLXBkcC1iYXIgICAgIDogaW5kZXgoJGJhc2UtZWxlbWVudHMsIHBkcC1iYXIpO1xuJHotaS1zZWFyY2hiYXIgICAgOiBpbmRleCgkYmFzZS1lbGVtZW50cywgc2VhcmNoYmFyKTtcbiR6LWktc2lkZWJhciA6IGluZGV4KCRiYXNlLWVsZW1lbnRzLHNpZGViYXIpO1xuJHotaS1tZW51ICAgIDogaW5kZXgoJGJhc2UtZWxlbWVudHMsIG1haW5tZW51KTtcbiR6LWktbW9kYWwgICAgOiBpbmRleCgkYmFzZS1lbGVtZW50cywgbW9kYWwpO1xuJHotaS16b29tICAgIDogaW5kZXgoJGJhc2UtZWxlbWVudHMsIHpvb20pO1xuXG4vLyNIZWFkZXIgZWxlbWVudHMgei1pbmRleGVzXG4kaGVhZGVyLWVsZW1lbnRzOiBzZWFyY2gsIG5hdi1tZW51LCBtaW5pY2FydCwgbWVudS1tb2JpbGU7XG5cbiR6LWktaGVhZGVyLS1zZWFyY2g6IGluZGV4KCRoZWFkZXItZWxlbWVudHMsIHNlYXJjaCk7XG4kei1pLWhlYWRlci0tbWVudTogaW5kZXgoJGhlYWRlci1lbGVtZW50cywgbmF2LW1lbnUpO1xuJHotaS1oZWFkZXItLW1lbnUtbW9iOiBpbmRleCgkaGVhZGVyLWVsZW1lbnRzLCBtZW51LW1vYmlsZSk7XG4kei1pLWhlYWRlci0tbWluaWNhcnQ6IGluZGV4KCRoZWFkZXItZWxlbWVudHMsIG1pbmljYXJ0KTtcblxuLy8gICRtb2RhbC1lbGVtZW50czogZmllbGRzLCBmb3JtLWNvbnRyb2xzLCBlcnJvcnMsIGF1dG9jb21wbGV0ZS1kcm9wZG93bjtcblxuLyoqXG4gKiBUbyBtYWtlIHRvIHNvbHV0aW9uIHNjYWxhYmxlIGFjcm9zcyB0aGUgd2Vic2l0ZSwgeW91IGNhbiBhZGQgbXVsdGlwbGUgbGlzdHMsIHJlbGF0ZWQgdG8gc3BlY2lmaWMgY29udGV4dHMuXG4gKiBSZW1lbWJlciB0aGF0IENTUyBzcGVjIGluZm9ybXMgdXMgdGhhdFxuICog4oCcc3RhY2tpbmcgY29udGV4dHMgYXJlIGdlbmVyYXRlZCBieSBhbnkgcG9zaXRpb25lZCBlbGVtZW50XG4gKiAoaW5jbHVkaW5nIHJlbGF0aXZlbHkgcG9zaXRpb25lZCBlbGVtZW50cykgaGF2aW5nIGEgY29tcHV0ZWQgdmFsdWUgb2Yg4oCYei1pbmRleOKAmSBvdGhlciB0aGFuIOKAmGF1dG/igJnigJ0sXG4gKiBzbyBzdGljayB0byB0aGlzIHNwZWMgaWYgeW91IHdhbnQgdG8gY3JlYXRlIGEgbmV3IHN0YWNraW5nIGNvbnRleHQuXG4gKi9cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==*/