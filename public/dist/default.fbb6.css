@import url(https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@400;600;700;800&display=swap);
@charset "UTF-8";
/* ------ getting values from a map with alert ----- */
/* ===BASELINE=== */
/**
 * Ref: http://www.modularscale.com/
 */
/* ===REM FUNCTION=== */
/**
 * Sassy functions to get the rem equivalent of a px value
 * preset-css-env will take care of fallback for older browsers
 * !NOTE: you only need to change the $rem-baseline value if your base size
 * is different from 10px (use _var_typography.scss in case)
 * @param value is referred to px
 * Credits: Rowan Manning
 */
/**
 * Ref: https://www.smashingmagazine.com/2014/06/sassy-z-index-management-for-complex-layouts/
 * In order to maintain the stacking order of the elements,
 * we can set up a Sass list which represents the order in which we want our elements to appear,
 * from lowest to highest, like shown below.
 * (Note that if we want to add an element to the existing stacking order,
 * we just have to update the list with our new element)
 * In order to retrieve the z-index value to assign to each element,
 * you can use the index() sass function, for i.e. .modal {z-index: index($elements, modal)}
 */
/**
 * To make to solution scalable across the website, you can add multiple lists, related to specific contexts.
 * Remember that CSS spec informs us that
 * “stacking contexts are generated by any positioned element
 * (including relatively positioned elements) having a computed value of ‘z-index’ other than ‘auto’”,
 * so stick to this spec if you want to create a new stacking context.
 */
.c-test-component {
  background: orange;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC5mYmI2LmNzcyIsIm1hcHBpbmdzIjoiO0FBQUEsZ0JBQWdCO0FDQ2hCO0FDREE7QUFDQTs7RUFBQTtBQU1BO0FBQ0E7Ozs7Ozs7RUFBQTtBQ1JBOzs7Ozs7Ozs7RUFBQTtBQWdDQTs7Ozs7O0VBQUE7QUh4QkE7RUFDSTtBQTBCSixDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3Njc3MvY29tcG9uZW50cy9jLXRlc3QtY29tcG9uZW50LnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Njc3MvdXRpbHMvX3VfZnVuY3Rpb25zLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Njc3MvdXRpbHMvX3UtcmVtLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Njc3MvdXRpbHMvX3Utei1pbmRleGVzLnNjc3MiXSwic291cmNlc0NvbnRlbnQiOlsiQGltcG9ydCBcIi4uL3V0aWxzL3VfZnVuY3Rpb25zXCI7XG5AaW1wb3J0IFwiLi4vdXRpbHMvdS1yZW1cIjtcbkBpbXBvcnQgXCIuLi91dGlscy91X2dyaWRcIjtcbkBpbXBvcnQgXCIuLi91dGlscy91LWNvbG9yc1wiO1xuQGltcG9ydCBcIi4uL3V0aWxzL3Utei1pbmRleGVzXCI7XG5AaW1wb3J0IFwiLi4vdXRpbHMvdS10eXBvZ3JhcGh5LXBsYWNlaG9sZGVyc1wiO1xuQGltcG9ydCBcIi4uL3V0aWxzL3UtZ2VuZXJpYy1wbGFjZWhvbGRlcnNcIjtcblxuLmMtdGVzdC1jb21wb25lbnR7XG4gICAgYmFja2dyb3VuZDogb3JhbmdlO1xufVxuIiwiQHVzZSBcInNhc3M6bWFwXCI7XG4vKiAtLS0tLS0gZ2V0dGluZyB2YWx1ZXMgZnJvbSBhIG1hcCB3aXRoIGFsZXJ0IC0tLS0tICovXG5cbkBmdW5jdGlvbiBtYXAoJG1hcCwgJGtleSkge1xuICBAaWYgbm90IG1hcC5oYXMta2V5KCRtYXAsICRrZXkpIHtcbiAgICBAd2FybiBcIktleSBgI3ska2V5fWAgbm90IGZvdW5kIGluICRtYXAgbWFwLlwiO1xuICB9XG4gIEByZXR1cm4gbWFwLmdldCgkbWFwLCAka2V5KTtcbn1cbiIsIi8qID09PUJBU0VMSU5FPT09ICovXG4vKipcbiAqIFJlZjogaHR0cDovL3d3dy5tb2R1bGFyc2NhbGUuY29tL1xuICovXG4kcmVtLWJhc2VsaW5lOiAxMDtcbiRnbG9iYWwtZm9udC1zaXplOiA2Mi41JTtcblxuLyogPT09UkVNIEZVTkNUSU9OPT09ICovXG4vKipcbiAqIFNhc3N5IGZ1bmN0aW9ucyB0byBnZXQgdGhlIHJlbSBlcXVpdmFsZW50IG9mIGEgcHggdmFsdWVcbiAqIHByZXNldC1jc3MtZW52IHdpbGwgdGFrZSBjYXJlIG9mIGZhbGxiYWNrIGZvciBvbGRlciBicm93c2Vyc1xuICogIU5PVEU6IHlvdSBvbmx5IG5lZWQgdG8gY2hhbmdlIHRoZSAkcmVtLWJhc2VsaW5lIHZhbHVlIGlmIHlvdXIgYmFzZSBzaXplXG4gKiBpcyBkaWZmZXJlbnQgZnJvbSAxMHB4ICh1c2UgX3Zhcl90eXBvZ3JhcGh5LnNjc3MgaW4gY2FzZSlcbiAqIEBwYXJhbSB2YWx1ZSBpcyByZWZlcnJlZCB0byBweFxuICogQ3JlZGl0czogUm93YW4gTWFubmluZ1xuICovXG5AZnVuY3Rpb24gcmVtKCR2YWx1ZSwgJHJlbS1iYXNlbGluZTokcmVtLWJhc2VsaW5lKSB7XG4gICAgLyogSWYgdmFsdWUgaXMgYSBudW1iZXIsIGRvIHNvbWUgbWFnaWMgcmVtIHN0dWZmICovXG4gICAgQGlmIHR5cGUtb2YoJHZhbHVlKSA9PSBcIm51bWJlclwiIHtcbiAgICAgICAgLyogU2xpZ2h0bHkgaGFja3kgd2F5IG9mIHJlbW92aW5nIHVuaXQgKi9cbiAgICAgICAgJHVuaXRsZXNzLXZhbHVlOiAkdmFsdWUgLyAoJHZhbHVlICogMCArIDEpO1xuICAgICAgICAvKiBSZXR1cm4gcmVtIHZhbHVlICovXG4gICAgICAgIEByZXR1cm4gI3skdW5pdGxlc3MtdmFsdWUgLyAkcmVtLWJhc2VsaW5lfXJlbTtcbiAgICB9XG4gICAgLyogTm9uLW51bWVyaWMgdmFsdWUsIGp1c3QgcmV0dXJuICovXG4gICAgQHJldHVybiAkdmFsdWU7XG59XG4iLCIvKipcbiAqIFJlZjogaHR0cHM6Ly93d3cuc21hc2hpbmdtYWdhemluZS5jb20vMjAxNC8wNi9zYXNzeS16LWluZGV4LW1hbmFnZW1lbnQtZm9yLWNvbXBsZXgtbGF5b3V0cy9cbiAqIEluIG9yZGVyIHRvIG1haW50YWluIHRoZSBzdGFja2luZyBvcmRlciBvZiB0aGUgZWxlbWVudHMsXG4gKiB3ZSBjYW4gc2V0IHVwIGEgU2FzcyBsaXN0IHdoaWNoIHJlcHJlc2VudHMgdGhlIG9yZGVyIGluIHdoaWNoIHdlIHdhbnQgb3VyIGVsZW1lbnRzIHRvIGFwcGVhcixcbiAqIGZyb20gbG93ZXN0IHRvIGhpZ2hlc3QsIGxpa2Ugc2hvd24gYmVsb3cuXG4gKiAoTm90ZSB0aGF0IGlmIHdlIHdhbnQgdG8gYWRkIGFuIGVsZW1lbnQgdG8gdGhlIGV4aXN0aW5nIHN0YWNraW5nIG9yZGVyLFxuICogd2UganVzdCBoYXZlIHRvIHVwZGF0ZSB0aGUgbGlzdCB3aXRoIG91ciBuZXcgZWxlbWVudClcbiAqIEluIG9yZGVyIHRvIHJldHJpZXZlIHRoZSB6LWluZGV4IHZhbHVlIHRvIGFzc2lnbiB0byBlYWNoIGVsZW1lbnQsXG4gKiB5b3UgY2FuIHVzZSB0aGUgaW5kZXgoKSBzYXNzIGZ1bmN0aW9uLCBmb3IgaS5lLiAubW9kYWwge3otaW5kZXg6IGluZGV4KCRlbGVtZW50cywgbW9kYWwpfVxuICovXG5cbiRiYXNlLWVsZW1lbnRzOiAgbWFpbiwgaGVhZGVyLCBwZHAtYmFyLCBtYWlubWVudSwgc2VhcmNoYmFyLCBzaWRlYmFyLCBtb2RhbCwgem9vbTtcbi8vIyMgUGxheWluZyB3aXRoIHN5c3RlbSB3aWRlIHotaW5kZXhlc1xuJHotaS1tYWluICAgICA6IGluZGV4KCRiYXNlLWVsZW1lbnRzLCBtYWluKTtcbiR6LWktaGVhZGVyICAgOiBpbmRleCgkYmFzZS1lbGVtZW50cywgaGVhZGVyKTtcbiR6LWktcGRwLWJhciAgICAgOiBpbmRleCgkYmFzZS1lbGVtZW50cywgcGRwLWJhcik7XG4kei1pLXNlYXJjaGJhciAgICA6IGluZGV4KCRiYXNlLWVsZW1lbnRzLCBzZWFyY2hiYXIpO1xuJHotaS1zaWRlYmFyIDogaW5kZXgoJGJhc2UtZWxlbWVudHMsc2lkZWJhcik7XG4kei1pLW1lbnUgICAgOiBpbmRleCgkYmFzZS1lbGVtZW50cywgbWFpbm1lbnUpO1xuJHotaS1tb2RhbCAgICA6IGluZGV4KCRiYXNlLWVsZW1lbnRzLCBtb2RhbCk7XG4kei1pLXpvb20gICAgOiBpbmRleCgkYmFzZS1lbGVtZW50cywgem9vbSk7XG5cbi8vI0hlYWRlciBlbGVtZW50cyB6LWluZGV4ZXNcbiRoZWFkZXItZWxlbWVudHM6IHNlYXJjaCwgbmF2LW1lbnUsIG1pbmljYXJ0LCBtZW51LW1vYmlsZTtcblxuJHotaS1oZWFkZXItLXNlYXJjaDogaW5kZXgoJGhlYWRlci1lbGVtZW50cywgc2VhcmNoKTtcbiR6LWktaGVhZGVyLS1tZW51OiBpbmRleCgkaGVhZGVyLWVsZW1lbnRzLCBuYXYtbWVudSk7XG4kei1pLWhlYWRlci0tbWVudS1tb2I6IGluZGV4KCRoZWFkZXItZWxlbWVudHMsIG1lbnUtbW9iaWxlKTtcbiR6LWktaGVhZGVyLS1taW5pY2FydDogaW5kZXgoJGhlYWRlci1lbGVtZW50cywgbWluaWNhcnQpO1xuXG4vLyAgJG1vZGFsLWVsZW1lbnRzOiBmaWVsZHMsIGZvcm0tY29udHJvbHMsIGVycm9ycywgYXV0b2NvbXBsZXRlLWRyb3Bkb3duO1xuXG4vKipcbiAqIFRvIG1ha2UgdG8gc29sdXRpb24gc2NhbGFibGUgYWNyb3NzIHRoZSB3ZWJzaXRlLCB5b3UgY2FuIGFkZCBtdWx0aXBsZSBsaXN0cywgcmVsYXRlZCB0byBzcGVjaWZpYyBjb250ZXh0cy5cbiAqIFJlbWVtYmVyIHRoYXQgQ1NTIHNwZWMgaW5mb3JtcyB1cyB0aGF0XG4gKiDigJxzdGFja2luZyBjb250ZXh0cyBhcmUgZ2VuZXJhdGVkIGJ5IGFueSBwb3NpdGlvbmVkIGVsZW1lbnRcbiAqIChpbmNsdWRpbmcgcmVsYXRpdmVseSBwb3NpdGlvbmVkIGVsZW1lbnRzKSBoYXZpbmcgYSBjb21wdXRlZCB2YWx1ZSBvZiDigJh6LWluZGV44oCZIG90aGVyIHRoYW4g4oCYYXV0b+KAmeKAnSxcbiAqIHNvIHN0aWNrIHRvIHRoaXMgc3BlYyBpZiB5b3Ugd2FudCB0byBjcmVhdGUgYSBuZXcgc3RhY2tpbmcgY29udGV4dC5cbiAqL1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9*/